/* eslint-disable no-restricted-globals */
self.importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js');

const { clientsClaim } = workbox.core;
const { precacheAndRoute, createHandlerBoundToURL } = workbox.precaching;
const { registerRoute, NavigationRoute } = workbox.routing;
const { StaleWhileRevalidate, CacheFirst } = workbox.strategies;
const { ExpirationPlugin } = workbox.expiration;

clientsClaim();
// Precache and route all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache the index.html page
const indexHandler = createHandlerBoundToURL('/index.html');
const navigationRoute = new NavigationRoute(indexHandler);
registerRoute(navigationRoute);

// Cache all static assets
registerRoute(
  ({ request }) => request.destination === 'style' || 
                   request.destination === 'script' || 
                   request.destination === 'worker',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

// Cache images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache audio files
registerRoute(
  ({ request }) => request.destination === 'audio',
  new CacheFirst({
    cacheName: 'audio',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache other assets
registerRoute(
  ({ request }) => request.destination === 'font' ||
                   request.destination === 'manifest' ||
                   request.url.includes('/assets/'),
  new StaleWhileRevalidate({
    cacheName: 'other-assets',
  })
);

// Catch-all route to cache everything else
registerRoute(
  () => true,
  new StaleWhileRevalidate({
    cacheName: 'catch-all',
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Optional: Clear old caches during activation
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.filter(cacheName => {
          // Delete old caches if necessary
          return cacheName.startsWith('pwa-') && !['static-resources', 'images', 'audio', 'other-assets', 'catch-all'].includes(cacheName);
        }).map(cacheName => {
          return caches.delete(cacheName);
        })
      );
    })
  );
});
